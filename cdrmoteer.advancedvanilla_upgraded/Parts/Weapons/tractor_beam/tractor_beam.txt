Part : /BASE_PART
{
	NameKey = "Parts/TractorBeam"
	IconNameKey = "Parts/TractorBeamIcon"
	IDString = cdrmoteer.tractor_beam
	EditorGroup = "advanced_vanilla_group_weapons"
	DescriptionKey = "Parts/TractorBeamDesc"
	Cost = 5000
	AIValue = 40
	Size = [2, 5]
	PhysicalRect = [0, 1, 2, 4]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 8000
	InitialPenetrationResistance = 1
	TypeCategories = [weapon, weapon_using_power,advanced_parts]
	RequiresCategories = [advanced_weapons_main]
	ReceivableBuffs = [Advanced_Vanilla_Weapons, AutoWeaponsEnable]
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 4]
		[2, 4]
		[0, 5]
		[1, 5]
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Bottom, BottomLeft, Left]
		}
		{
			Key = [1, 1]
			Value = [TopRight, Right, BottomRight, Bottom]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [36.8, 92]
	}
	Components
	{
		
		
		BlueprintSprite0
		{
			File = "blueprints.png"
			Size = [2, 5]
		Type=BlueprintSprite;}
		PowerUIStats
		{
			Min = 1.333
			Ideal = 2.665
			Type = UIStats
			Stat = Power
		}
		CrewUIStats
		{
			Min = 2
			Ideal = 6
			Type = UIStats
			Stat = Crew
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles
			[
				PowerToggle
				BatteryStorage
				PartCrew
			]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			ToggledOnChoices = [1]
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [1]
		}

		BatteryStorage
		{
			Type = AmmoConsumer
			AmmoType = battery
			MaxAmmo = 8000
			Priorities = { Low=&../LowConsumeJobPriority; High=&../HighConsumeJobPriority; Empty=&../EmptyConsumeJobPriority }
			LowConsumeJobPriority = &/PRIORITIES/Weapon_Supply/Low
			HighConsumeJobPriority = &/PRIORITIES/Weapon_Supply/High
			EmptyConsumeJobPriority = &/PRIORITIES/Weapon_Supply/Empty
			JobUnassignThreshold = 1000000// Effectively unassignable.
			ResupplyThreshold = 500
			AmmoDesireToggle = PowerToggle

			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Weapon
		{
			Type = FixedWeapon
			OperationalToggle = IsOperational,
			Location = [1, 1.5]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			FireInterval = .2
			AIFirepowerRating = 3000
			FireModeToggle = FireModeToggle
			CanBeGivenExplicitTarget = false

			OldEmitter
			{
				Type = Beam
				Range = 180
				IdealRange = 170
				Duration = .5
				HitInterval = .1
				ShieldCollisions
				{
					HitsEnemyShields = false
				}

				BeamMediaEffects
				[
					{
						Type = Beam
						BeamSprite
						{
							Texture
							{
								File = "beam_base.png"
								SampleMode = Linear
								MipLevels = max
							}
							_baseColor = [255, 255, 255, 255]
							Shader = "beam.shader"
							_sizePulseFactor = 1.2
							_sizePulseInterval = -.1
							_sizePulseUOffsetFactor = -.03
							Size = [2.75, 0]// Only width matters.
							VertexColor = [255, 255, 255, 217]
						}
						FadeInTime = .25
						FadeOutTime = .25
						ArcSpriteSegments = 64
						Bucket = Middle1
					}

					&<../../Particles/tractor_beam/ion_beam_emit_sparks.txt>

					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "emit.wav"
						Volume = 1
						MaxConcurrent = 1
						MaxConcurrentVolume = 1
						IntensityRampUpTime = .25
						IntensityRampDownTime = .25
					}

					: /BASE_SOUNDS/AudioExterior
					{
						Sound = "beam.wav"
						Volume = 1
						MaxConcurrent = 1
						MaxConcurrentVolume = 1
						IntensityRampUpTime = .25
						IntensityRampDownTime = .25

						DynamicVolume : ^/0/DynamicVolume
						{
							UseCustomShapeForDistance = true
						}
						DynamicFilter : ^/0/DynamicFilter
						{
							UseCustomShapeForDistance = true
						}
					}
				]

				HitShield
				{
					HitEffects
					[
						{
							Type = ShieldDamage;
							Damage = 200;
						}
						{
							Type = Impulse;
							Impulse = -10;
						}
					]

					MediaEffects = &../HitOperational/MediaEffects;
				}
				HitOperational
				{
					HitEffects
					[
						{
							Type = PartDamage;
							Damage = { BaseValue=20; BuffType=Advanced_Vanilla_Weapons; BuffMode=Multiply; }
						}
						{
							Type = Impulse;
							Impulse = { BaseValue=-10; BuffType=Advanced_Vanilla_Weapons; BuffMode=Multiply; }
						}
					]

					MediaEffects
					[
						&<../../Particles/tractor_beam/ion_beam_hit.txt>
						&<../../Particles/tractor_beam/ion_beam_hit_flash.txt>
						&<../../Particles/tractor_beam/ion_beam_hit_sparks.txt>

						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "hit.wav"
							Volume = .5
							MaxConcurrent = 1
							MaxConcurrentVolume = 1
							IntensityRampUpTime = .25
							IntensityRampDownTime = .25
						}

						: /BASE_SHAKE
						{
							ShakeAmount = .05
							Duration = .5
						}
					]
				}

				HitStructural
				{
					HitEffects
					[
						{
							Type = PartDamage;
							Damage = 15;
						}
						{
							Type = Impulse;
							Impulse = -5;
						}
					]

					MediaEffects
					[
						&<../../Particles/tractor_beam/ion_beam_hit_struct.txt>

						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "hit.wav"
							Volume = .25
							MaxConcurrent = 1
							MaxConcurrentVolume = .5
							IntensityRampUpTime = .25
							IntensityRampDownTime = .25
						}

						: /BASE_SHAKE
						{
							ShakeAmount = 0.25
							Duration = 1
						}
					]
				}
			}

			CoverageLine
			{
				Sprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 127]
				}
				Thickness = 2
				CapBeginPixels = 12
				CapEndPixels = 12
			}
		Emitter = WeaponEmitter
		}

		WeaponEmitter: Weapon/OldEmitter
		{
			Type = BeamEmitter
			Location
			[
				0
				0
			]
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			OperationalToggle = IsOperational
			FireDelay = 0
			AmmoStorage = BatteryStorage
			AmmoUsed = 125
			MinAmmoUsed = 1
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.65, 4.4]
			Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.35, 4.4]
			Rotation = 180d
		}
		RealPartCrew
		{
			Type = PartCrew
			Crew = 2
			Priorities = { First=&../FirstCrewJobPriority; Additional=&../AdditionalCrewJobPriority; Full=&../FullCrewJobPriority }
			FirstCrewJobPriority = &/PRIORITIES/Weapon_Crew/First
			AdditionalCrewJobPriority = &/PRIORITIES/Weapon_Crew/Additional
			FullCrewJobPriority = &/PRIORITIES/Weapon_Crew/Full
			PrerequisitesBeforeCrewing = [BatteryStorage, PowerToggle]
			CrewDestinations
			[
				[.65, 4.4]
				[1.35, 4.4]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}
		
		PartCrew // PartCrew is replaced with a multi-toggle, which will trigger if either the buff is received, *or* if there is crew present.
		{
			Type = MultiToggle
			Toggles = [WeaponControllerBuffToggle, RealPartCrew]
			Mode = Any
		}
		
		WeaponControllerBuffToggle // The buff toggle is triggered by the weapon controller
		{
			Type = BuffToggle
			BuffType = AutoWeaponsEnable
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [1, 3]
			DoodadToggle = WeaponEmitter
			ShowToggledDoodadsWhenNotOperational = true
			AnimationSpeedFactor = BatteryStorage
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 4]
					}
					{
						File = "floor_33.png"
						Size = [2, 4]
					}
					{
						File = "floor_66.png"
						Size = [2, 4]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"emitter_on1.png"
							"emitter_on2.png"
							"emitter_on3.png"
							"emitter_on4.png"
							"emitter_on5.png"
							"emitter_on6.png"
							"emitter_on7.png"
							"emitter_on8.png"
						]
						Size = [2, 2]
						Offset = [0, -2]
						AnimationInterval = 0.025
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "emitter_off.png"
						Size = [2, 2]
						Offset = [0, -2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 5]
						Offset = [0, -0.5]
						AnimationInterval = 0.025
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "walls_33.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "walls_66.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "roof_33.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "roof_66.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [2, 5]
						Offset = [0, -0.5]
						AnimationInterval = 0.025
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		OperatingHum
		{
			Type = ContinuousEffects
			Location = [1, 2.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "ion_beam_operating.wav"
					Volume = .2
					Speed = 2
					MaxConcurrent = 1
					MaxConcurrentVolume = .2
				}
			]
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [1, 3]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 4]
				}
				{
					File = "batteries2.png"
					Size = [2, 4]
				}
				{
					File = "batteries3.png"
					Size = [2, 4]
				}
				{
					File = "batteries4.png"
					Size = [2, 4]
				}
				{
					File = "batteries5.png"
					Size = [2, 4]
				}
				{
					File = "batteries6.png"
					Size = [2, 4]
				}
				{
					File = "batteries7.png"
					Size = [2, 4]
				}
				{
					File = "batteries8.png"
					Size = [2, 4]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1, 2.5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1, 2.75]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1.5, 1.5]
					}
				}
			]
		}
	}
}
