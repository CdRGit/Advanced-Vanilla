Part : /BASE_PART
{
	NameKey = "Keainae/Parts/FighterCockpit"
	IconNameKey = "Keainae/Parts/FighterCockpitIcon"
	IDString = cdrmoteer.keainae.fighter_cockpit
	EditorGroup = "Flight"
	DescriptionKey = "Keainae/Parts/FighterCockpitDesc"
	Cost = 2000
	Size = [1, 2]
	SelectionTypeID = "quarters"
	MaxHealth = 2000
	TypeCategories = [provides_crew,command, is_crewed, keainae_tier_1_controller, bounty_objective]
	CrewCapacity = 2
	IgnoreRotationForMirroredSelection = true
	CrewSpawnLocations
	[
		[.5, 1.5]
		[.5, 1.5]
	]
	AllowedDoorLocations
	[
		[0,2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	ReceivableBuffs = [Keainae_Tier_1_Problem]
	Components : ^/0/Components
	{
		DebuffSelf
		{
			Type = SelfBuffProvider
			BuffType = Keainae_Tier_1_Problem
			BuffAmount = 1
		}
		
		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Keainae_Tier_1_Control
			BuffAmount = 1
			GridDistance = 20
			OperationalToggle = IsOperational
		}
		
		CrewIdler
		{
			Type = CrewIdler
			MaxCrew = &../../CrewCapacity
			Buffer = .25
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
					{
						File = "walls_33.png"
						Size = [1, 2]
					}
					{
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.125
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, 1]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
		
		ProblemToggle
		{
			Type = BuffToggle
			BuffType = Keainae_Tier_1_Problem
			MinBuffValue = 1
			MaxBuffValue = 21
		}

		CrewUIStats
		{
			Type = UIStats
			Stat = Crew
			Provided = 2
			Min = 1
			Ideal = 1
		}
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew, ProblemToggle]
			Mode = All
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
		}

		Sensor
		{
			Type = Sensor
			OperationalToggle = IsOperational
			SightRadius = 200
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [0.5, 0.5]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			Priorities = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle, ProblemToggle]
			AbandonWhenOnFire = false
			CrewDestinations
			[
				[0.5, 0.5]
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = ProblemToggle
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}
	}
}
